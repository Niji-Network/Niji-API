openapi: "3.1.0"
info:
  title: "Niji API | Anime related API"
  description: >
    This API manages anime/manga images. It supports uploading images via a source URL,
    saving them locally, and provides endpoints for anime related images.
  version: "1.0.0"
servers:
  - url: "https://api.nijii.xyz"
paths:
  /v1/auth/create-key:
    post:
      summary: "Create a new API key for a user"
      description: >
        Creates a new API key for the specified username.
        **Query Parameters:**
        - **username** (string, required): Unique username for API key generation. 16 characters max.
      operationId: "create_api_key"
      parameters:
        - name: username
          in: query
          description: "Unique username for API key generation."
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "API key created successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKeyResponse"
              examples:
                success:
                  summary: "Successful API key creation"
                  value:
                    username: "john_doe"
                    api_key: "abcdef1234567890abcdef1234567890"
                    role: "user"
        '400':
          description: "Username already exists or invalid input."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v1/img/search:
    get:
      summary: "Search and list images with filters and pagination"
      description: >
        Searches for images using optional filters:
        - **nsfw**: Boolean (default: false) to include NSFW images.
        - **character**: Filter by character name.
        - **tags**: Comma-separated list of tags.
        - **anime**: Filter by anime name.
        - **category**: Filter by image category.
        - **page**: Page number (default: 1).
        - **size**: Number of images per page (default: 5).
      operationId: "search_images"
      parameters:
        - name: nsfw
          in: query
          description: "Filter for NSFW images."
          required: false
          schema:
            type: boolean
            default: false
        - name: character
          in: query
          description: "Filter by character name."
          required: false
          schema:
            type: string
        - name: tags
          in: query
          description: "Comma-separated list of tags."
          required: false
          schema:
            type: string
        - name: anime
          in: query
          description: "Filter by anime name."
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: "Filter by image category."
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: "Page number."
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: size
          in: query
          description: "Number of images per page."
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
      responses:
        '200':
          description: "Successful response with paginated image results."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedImageResponse"
              examples:
                example:
                  summary: "Paginated image results"
                  value:
                    page: 1
                    size: 5
                    total: 12
                    images:
                      - _id: "614c1a1f1c4ae3a12b0e3f8d"
                        url: "https://cdn.nijii.xyz/images/waifu/unique_filename.jpg"
                        category: "waifu"
                        anime: "Example Anime"
                        nsfw: false
                        character: "Example Character"
                        tags: ["cute", "smile"]
        '404':
          description: "No images found matching the given filters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/img/waifu:
    get:
      summary: "Retrieve waifu images"
      description: "Retrieves images with the category 'waifu', with optional NSFW filtering and pagination."
      operationId: "get_waifu_images"
      parameters:
        - name: nsfw
          in: query
          description: "Filter for NSFW images."
          required: false
          schema:
            type: boolean
            default: false
        - name: page
          in: query
          description: "Page number."
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: size
          in: query
          description: "Number of images per page."
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
      responses:
        '200':
          description: "Successful response with paginated waifu images."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedImageResponse"
        '404':
          description: "No waifu images found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/img/husbando:
    get:
      summary: "Retrieve husbando images"
      description: "Retrieves images with the category 'husbando', with optional NSFW filtering and pagination."
      operationId: "get_husbando_images"
      parameters:
        - name: nsfw
          in: query
          description: "Filter for NSFW images."
          required: false
          schema:
            type: boolean
            default: false
        - name: page
          in: query
          description: "Page number."
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: size
          in: query
          description: "Number of images per page."
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
      responses:
        '200':
          description: "Successful response with paginated husbando images."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedImageResponse"
        '404':
          description: "No husbando images found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/img/cover:
    get:
      summary: "Retrieve cover images"
      description: "Retrieves images with the category 'cover', with optional NSFW filtering and pagination."
      operationId: "get_cover_images"
      parameters:
        - name: nsfw
          in: query
          description: "Filter for NSFW images."
          required: false
          schema:
            type: boolean
            default: false
        - name: page
          in: query
          description: "Page number."
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: size
          in: query
          description: "Number of images per page."
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
      responses:
        '200':
          description: "Successful response with paginated cover images."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedImageResponse"
        '404':
          description: "No cover images found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/img/random:
    get:
      summary: "Retrieve a random image with optional filters"
      description: >
        Retrieves random images based on optional filters (nsfw, character, tags) and returns the result in a paginated format.
      operationId: "get_random_images"
      parameters:
        - name: nsfw
          in: query
          description: "Filter for NSFW images."
          required: false
          schema:
            type: boolean
            default: false
        - name: character
          in: query
          description: "Filter by character name."
          required: false
          schema:
            type: string
        - name: tags
          in: query
          description: "Comma-separated list of tags."
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: "Page number."
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: size
          in: query
          description: "Number of images per page."
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
      responses:
        '200':
          description: "Successful response with paginated random images."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedImageResponse"
              examples:
                example:
                  summary: "Random images example"
                  value:
                    page: 1
                    size: 5
                    total: 8
                    images:
                      - _id: "615d2b4e1d5c3a1f8c3e1d4f"
                        url: "https://cdn.nijii.xyz/images/random/random_image.jpg"
                        category: "random"
                        anime: null
                        nsfw: false
                        character: null
                        tags: []
        '404':
          description: "No images found matching the given filters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/img/:
    post:
      summary: "Post a new image"
      description: >
        Downloads an image from the provided URL, saves it locally, and stores its metadata in the database.
        Only users with at least the **team** role are authorized.
      operationId: "post_image"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImageCreate"
            examples:
              example:
                summary: "Image creation payload example"
                value:
                  url: "https://cdn.nijii.xyz/image.jpg"
                  category: "waifu"
                  anime: "My Hero Academia"
                  nsfw: false
                  character: "Ochaco Uraraka"
                  tags: ["cute", "anime"]
      responses:
        '200':
          description: "Image added successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                  image:
                    $ref: "#/components/schemas/Image"
              examples:
                success:
                  summary: "Successful image creation"
                  value:
                    detail: "Image added successfully."
                    image:
                      _id: "615d2b4e1d5c3a1f8c3e1d4f"
                      url: "https://cdn.nijii.xyz/images/waifu/unique_filename.jpg"
                      category: "waifu"
                      anime: "My Hero Academia"
                      nsfw: false
                      character: "Ochaco Uraraka"
                      tags: ["cute", "anime"]
        '400':
          description: "Invalid input or missing required fields."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '403':
          description: "User not authorized to post images."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: "Error inserting the image into the database."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/img/{image_id}:
    put:
      summary: "Update an existing image"
      description: >
        Updates an existing image record.
        Only **admin** users are authorized to update images.
      operationId: "update_image"
      parameters:
        - name: image_id
          in: path
          description: "The MongoDB ObjectId of the image to update."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImageUpdate"
            examples:
              example:
                summary: "Update payload example"
                value:
                  url: "https://nijii.xyz/new_image.jpg"
                  category: "waifu"
                  nsfw: false
      responses:
        '200':
          description: "Image updated successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                  image:
                    $ref: "#/components/schemas/Image"
              examples:
                success:
                  summary: "Successful update"
                  value:
                    detail: "Image updated successfully."
                    image:
                      _id: "615d2b4e1d5c3a1f8c3e1d4f"
                      url: "https://cdn.nijii.xyz/images/waifu/new_unique_filename.jpg"
                      category: "waifu"
                      anime: "My Hero Academia"
                      nsfw: false
                      character: "Ochaco Uraraka"
                      tags: ["cute", "anime"]
        '400':
          description: "Invalid image_id format."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '403':
          description: "User not authorized to update images."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: "Image not found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: "No changes made or update failed."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: "Delete an existing image"
      description: >
        Deletes an image record from the database and removes its corresponding file from disk.
        Only **admin** users are authorized to delete images.
      operationId: "delete_image"
      parameters:
        - name: image_id
          in: path
          description: "The MongoDB ObjectId of the image to delete."
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Image deleted successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
              examples:
                success:
                  summary: "Successful deletion"
                  value:
                    detail: "Image deleted successfully."
        '400':
          description: "Invalid image_id format."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '403':
          description: "User not authorized to delete images."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: "Image not found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: "Error deleting the image."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    APIKeyResponse:
      type: object
      properties:
        username:
          type: string
          example: "john_doe"
        api_key:
          type: string
          example: "abcdef1234567890abcdef1234567890"
        role:
          type: string
          example: "team"
      required:
        - username
        - api_key
        - role
      description: "Response model for API key creation."
    Image:
      type: object
      properties:
        _id:
          type: string
          example: "614c1a1f1c4ae3a12b0e3f8d"
        url:
          type: string
          example: "https://cdn.nijii.xyz/images/waifu/unique_filename.jpg"
        category:
          type: string
          example: "waifu"
        anime:
          type: string
          nullable: true
          example: "My Hero Academia"
        nsfw:
          type: boolean
          example: false
        character:
          type: string
          nullable: true
          example: "Ochaco Uraraka"
        tags:
          type: array
          items:
            type: string
          example: ["cute", "anime"]
      required:
        - _id
        - url
        - category
        - nsfw
    ImageCreate:
      type: object
      properties:
        url:
          type: string
          format: uri
          example: "https://cdn.nijii.xyz/image.jpg"
        category:
          type: string
          example: "waifu"
        anime:
          type: string
          nullable: true
          example: "My Hero Academia"
        nsfw:
          type: boolean
          default: false
          example: false
        character:
          type: string
          nullable: true
          example: "Ochaco Uraraka"
        tags:
          type: array
          items:
            type: string
          nullable: true
          example: ["cute", "anime"]
      required:
        - url
        - category
    ImageUpdate:
      type: object
      properties:
        url:
          type: string
          format: uri
          nullable: true
          example: "https://nijii.xyz/new_image.jpg"
        category:
          type: string
          nullable: true
          example: "waifu"
        anime:
          type: string
          nullable: true
          example: "My Hero Academia"
        nsfw:
          type: boolean
          nullable: true
          example: false
        character:
          type: string
          nullable: true
          example: "Ochaco Uraraka"
        tags:
          type: array
          items:
            type: string
          nullable: true
          example: ["cute", "anime"]
    PaginatedImageResponse:
      type: object
      properties:
        page:
          type: integer
          example: 1
        size:
          type: integer
          example: 5
        total:
          type: integer
          example: 12
        images:
          type: array
          items:
            $ref: "#/components/schemas/Image"
    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
          example: "An error occurred: <error details>"
      description: "Error response model."

